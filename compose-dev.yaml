version: "3"

networks:
  intranet:
    internal: false
    driver: bridge

volumes:
  gosvelte-postgres:
  gosvelte-gotify:

services:
  reverse-proxy:
    image: "traefik:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    networks:
      - intranet

  # -----------------------------------------------------------------------------------------------------
  #
  #       FRONTEND
  #
  # -----------------------------------------------------------------------------------------------------

  frontend:
    image: node:latest
    container_name: web-ui
    restart: always
    volumes:
      - ./services/frontend/package.json:/app/package.json
      - ./services/frontend/svelte.config.js:/app/svelte.config.js
      - ./services/frontend/tsconfig.json:/app/tsconfig.json
      - ./services/frontend/vite.config.ts:/app/vite.config.ts
      - ./services/frontend/static:/app/static
      - ./services/frontend/src:/app/src
    networks:
      - intranet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`web.localhost`)&&PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      - "traefik.http.routers.frontend.entrypoints=web"
    command: ["sh", "-c", "cd /app && npm install && npm run dev"]

  frontend-tests:
    image: node:latest
    container_name: web-ui-test
    restart: always
    volumes:
      - ./services/frontend/package.json:/app/package.json
      - ./services/frontend/svelte.config.js:/app/svelte.config.js
      - ./services/frontend/tsconfig.json:/app/tsconfig.json
      - ./services/frontend/vite.config.ts:/app/vite.config.ts
      - ./services/frontend/static:/app/static
      - ./services/frontend/src:/app/src
    networks:
      - intranet
    command: ["sh", "-c", "cd /app && npm install && npm run test"]

  frontend-tests-ci:
    image: node:latest
    container_name: web-ui-test
    restart: always
    volumes:
      - ./services/frontend/package.json:/app/package.json
      - ./services/frontend/svelte.config.js:/app/svelte.config.js
      - ./services/frontend/tsconfig.json:/app/tsconfig.json
      - ./services/frontend/vite.config.ts:/app/vite.config.ts
      - ./services/frontend/static:/app/static
      - ./services/frontend/src:/app/src
    networks:
      - intranet
    command: ["sh", "-c", "cd /app && npm install && npm run test"]

  # -----------------------------------------------------------------------------------------------------
  #
  #       BACKEND
  #
  # -----------------------------------------------------------------------------------------------------

  backend:
    image: golang:latest
    container_name: web-api
    volumes:
      - ./services/backend:/app
    networks:
      - intranet
    # environments:
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_started
      # gotify:
      #   condition: service_started
    env_file:
      - "./.env"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`web.localhost`)&&(PathPrefix(`/api`)||PathPrefix(`/swagger`))"
      - "traefik.http.routers.backend.priority=2"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.entrypoints=web"
    command: ["sh", "-c", "cd /app && bash scripts/run-local-docker.sh"]

  backend-tests:
    image: golang:latest
    container_name: web-api-test
    volumes:
      - ./services/backend:/app
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    tty: true
    environment:
      - TERM=xterm-256color`
    command: ["sh", "-c", "cd /app && bash scripts/test-local-docker.sh"]

  backend-tests-ci:
    image: golang:latest
    container_name: web-api-test
    volumes:
      - ./services/backend:/app
    tty: true
    environment:
      - TERM=xterm-256color`
    command: ["sh", "-c", "cd /app && bash scripts/test-local-docker.sh"]

  # -----------------------------------------------------------------------------------------------------
  #
  #       DATABASE
  #
  # -----------------------------------------------------------------------------------------------------

  postgres:
    image: postgis/postgis
    restart: always
    environment:
      POSTGRES_USER: ${APP_DB_USERNAME}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
      POSTGRES_DB: ${APP_DB_DATABASE}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - intranet
    volumes:
      - "gosvelte-postgres:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # gotify:
  #   image: gotify/server-arm64 # may change due to architecture
  #   volumes:
  #     - "gosvelte-gotify:/app/data gotify/server"
  #   ports:
  #     - "8087:80"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.gotify.rule=Host(`web.localhost`)&&(PathPrefix(`/gotify`))"
  #     - "traefik.http.routers.gotify.priority=3"
  #     - "traefik.http.routers.gotify.service=gotify"
  #     - "traefik.http.routers.gotify.entrypoints=web"
  #     - "traefik.http.services.gotify.loadbalancer.server.port=80"

  #     # - "traefik.http.routers.gotify.middlewares=gotify-stripprefix"
  #     # - "traefik.http.middlewares.gotify-stripprefix.stripprefix.prefixes=/gotify"

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    command: start-dev

  grafana:
    image: grafana/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`web.localhost`)&&PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.priority=2"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana"
      - "traefik.http.routers.grafana.middlewares=gotify-stripprefix"
    networks:
      - intranet
