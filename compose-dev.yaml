version: "3"

networks:
  intranet:
    internal: false
    driver: bridge

services:
  reverse-proxy:
    image: "traefik:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    networks:
      - intranet

  frontend:
    image: node:latest
    container_name: web-ui
    volumes:
      - ./services/frontend/tailwind.config.cjs:/app/tailwind.config.cjs
      - ./services/frontend/postcss.config.cjs:/app/postcss.config.cjs
      - ./services/frontend/package.json:/app/package.json
      - ./services/frontend/svelte.config.js:/app/svelte.config.js
      - ./services/frontend/tsconfig.json:/app/tsconfig.json
      - ./services/frontend/vite.config.ts:/app/vite.config.ts
      - ./services/frontend/static:/app/static
      - ./services/frontend/src:/app/src
    networks:
      - intranet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`web.localhost`)&&PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      - "traefik.http.routers.frontend.entrypoints=web"
    command: ["sh", "-c", "cd /app && npm install && npm run dev"]

  backend:
    image: golang:latest
    container_name: web-api
    volumes:
      - ./services/backend-1:/app
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`web.localhost`)&&(PathPrefix(`/api`)||PathPrefix(`/swagger`))"
      - "traefik.http.routers.backend.priority=2"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.entrypoints=web"
    command: ["sh", "-c", "cd /app && bash scripts/run-local-docker.sh"]

  backend-tests:
    image: golang:latest
    container_name: web-api-test
    volumes:
      - ./services/backend-1:/app
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    tty: true
    environment:
      - TERM=xterm-256color`
    command: ["sh", "-c", "cd /app && bash scripts/test-local-docker.sh"]

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - intranet
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 10s
      timeout: 5s
      retries: 5
